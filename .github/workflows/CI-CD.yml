name: CI/CD Pipeline

on:
  push:
    branches:
      - async_tg_bot

jobs:
  unit_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --dev

      - name: Run unit tests
        run: |
          pipenv run pytest postgres/tests

  build_docker_image:
    runs-on: ubuntu-latest
    needs: unit_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker buildx build \
            --build-arg API_KEY=${{ secrets.API_KEY }} \
            --build-arg APP_DOMAIN=${{ secrets.APP_DOMAIN }} \
            --build-arg GET_PASSWORD=${{ secrets.GET_PASSWORD }} \
            --build-arg GET_USER=${{ secrets.GET_USER }} \
            --build-arg GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }} \
            --build-arg GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }} \
            --build-arg NGROK_AUTHTOKEN=${{ secrets.NGROK_AUTHTOKEN }} \
            --build-arg POOL_HOST_DB=${{ secrets.POOL_HOST_DB }} \
            --build-arg POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            --build-arg POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --build-arg POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --build-arg SECRET_TOKEN_TG_WEBHOOK=${{ secrets.SECRET_TOKEN_TG_WEBHOOK }} \
            --build-arg TG_BOT_API_URL=${{ secrets.TG_BOT_API_URL }} \
            --build-arg TOKEN=${{ secrets.TOKEN }} \
            -t ${{ secrets.DOCKER_USERNAME }}/weather_bot:latest \
            .

  push_docker_image:
    runs-on: ubuntu-latest
    needs: build_docker_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/weather_bot:latest

  run_docker_compose:
    runs-on: ubuntu-latest
    needs: push_docker_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.tag_name')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Run Docker Compose
        run: |
          docker-compose -f deploy/docker-compose.yml up -d
        env:
          API_KEY: ${{ secrets.API_KEY }}
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
          GET_PASSWORD: ${{ secrets.GET_PASSWORD }}
          GET_USER: ${{ secrets.GET_USER }}
          GF_SECURITY_ADMIN_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
          GF_SECURITY_ADMIN_USER: ${{ secrets.GF_SECURITY_ADMIN_USER }}
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
          POOL_HOST_DB: ${{ secrets.POOL_HOST_DB }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          SECRET_TOKEN_TG_WEBHOOK: ${{ secrets.SECRET_TOKEN_TG_WEBHOOK }}
          TG_BOT_API_URL: ${{ secrets.TG_BOT_API_URL }}
          TOKEN: ${{ secrets.TOKEN }}